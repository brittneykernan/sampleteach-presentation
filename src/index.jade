doctype html
html
  head
    meta(charset='utf-8')
    meta(name='viewport', content='width=device-width, initial-scale=1, maximum-scale=1')
    title Control Flow

    // build:css styles/styles.css
    //- Check out 'src/bower_components/prism/themes/' for available themes
    link(rel='stylesheet', type='text/css', href='bower_components/prism/themes/prism-tomorrow.css')
    link(rel='stylesheet', type='text/css', href='styles/main.css')
    // endbuild

  body

    article

      section(data-bespoke-state='title')
        h1 Control Flow

      section(data-bespoke-state='programming')
        h2 What is a program?
        ul
          li.bullet
          li.bullet A planned series of future events
          li.bullet A sequence of instructions, written to perform a specific task with a computer

      section(data-bespoke-state='programming')
        h2 What is programming about?
        ul
          li.bullet
          li.bullet telling the computer what you want it to do
          li.bullet breaking complex tasks into small steps
          li.bullet easy for the computer and human to read

      section(data-bespoke-state='programming')
        h2 Breaking down tasks
        h3 Task: Make Gif out of movie clip    
        pre
          code.language-javascript.
            1. get movie clip from directory
            2. decode into single frames
            3. create a new blank gif
            4. insert frames in order
            5. save gif data to directory

      section(data-bespoke-state='programming')
        h2 Code Readability  
        pre
          code.language-javascript.
            // whoa, no idea what happens here?
            x = y({p:z})

            // readable and pass-off-able
            var clip = read_from_directory({
                path : '/path/to/movie.mov'
              });
      
      section(data-bespoke-state='programming')
        h2 How does a computer read a program?
        ul
          li.bullet
          li.bullet from left to right, top to bottom
          li.bullet executed sequentially
          li.bullet human readable and written code, is translated into computer readable code

      section(data-bespoke-state='programming')
        h2 Human to Computer
        h3 "HELLO" in binary
        div.fullWidth.translation
          div.floatLeft human code
            pre
              code.language-javascript.
                print "HELLO";

          div.floatLeft.middle translation
            pre
              code.language-javascript.
                H is 01001000 
                E is 01000101 
                L is 01001100 
                O is 01001111

          div.floatLeft computer
            pre
              code.language-javascript.
                010010000
                100010101
                001100010
                011000100
                1111

      section(data-bespoke-state='programming')
        h2 What is control Flow?
        ul
          li.bullet
          li.bullet the order instructions are run
          li.bullet statements are points on the code that control what is run next

      section(data-bespoke-state='programming')
        h2 Control Flow
        img(src="img/goosebumps.png")
        
      
      section(data-bespoke-state='statements')
        h2 Statements
        ul
          li.bullet
          li.bullet Choices - choices between two or more paths
          li.bullet Repeat Loops - repeat a task until an outcome is achieved 
          li.bullet Stops - stop a task 

      section(data-bespoke-state='statements')
        h2 Choices
        ul
          li If Else
            pre 
              code.language-javascript.
                // wake up to music
                if current_time == ( work_starts_time - 1hr )
                  play_favorite_tune
                ...
          li Switch

      section(data-bespoke-state='statements')
        h2 Repeats
        ul
          li For Loops
            pre 
              code.language-javascript.
                walk_to(dog_park_location)
                // look at all the dogs
                for each dog in dogs_in_park
                  admire(dog)
                walk_to(home_location)
          li While Loops

      section(data-bespoke-state='statements')
        h2 Stops (and Continues)
        ul
          li Exit / Return
            pre 
              code.language-javascript.
                for rollercoaster in universal_studios_coasters
                  // make sure you haven't had too much 
                  if you.face_color == "green"
                    return;
                  ride(rollercoaster)
          li Break
          li Continue

      section(data-bespoke-state='statements')
        h2 Functions
        ul
          li.bullet
          li.bullet group of statements
          li.bullet performs a specific task
          li.bullet reusable code
          li.bullet uniquely named
          li.bullet takes input and computes output

      section(data-bespoke-state='statements')
        h2 Function
        pre 
          code.language-javascript.
            function rideAllTheRides(rides) {
              for (var i = 0; i < rides.length; i++) {
                // make sure you haven't had too much 
                if (you.faceColor == "green") {
                  return false;
                }
                ride(rides[i]);
              }
              return true;
            }

      section(data-bespoke-state='operators')
        h2 Operators
        ul
          li.bullet
          li.bullet basic math
          li.bullet Order of Operations 
          li.bullet many more, these are the foundations

      section(data-bespoke-state='operators')
        h2 Assignment
        ul
          li.bullet
          li.bullet = 
          li.bullet  
            pre 
              code.language-javascript.
                var todaysVibe = "rad";   

      section(data-bespoke-state='operators')
        h2 Math
        ul
          li.bullet
          li.bullet + and -
          li.bullet  
            pre 
              code.language-javascript.
                // just one more
                var coffeeToday = 3 + 1;   
          li.bullet * and /  
          li.bullet  
            pre 
              code.language-javascript.
                // split those half dozen donuts with me
                var myTreats = 6/2;   

      section(data-bespoke-state='operators')
        h2 Comparison
        ul
          li.bullet
          li.bullet > and >=
          li.bullet  
            pre 
              code.language-javascript.
                // true
                cracked_phone_screen > no_phone_screen
          li.bullet < and <= 
          li.bullet  
            pre 
              code.language-javascript.
                var usbChargerCount = 1;
                if( usbChargerCount <= 1 )
                  alert("Go buy a USB Charger"); 

      section(data-bespoke-state='operators')
        h2 Comparison
        ul
          li.bullet
          li.bullet == equals
          li.bullet != not equals
          li.bullet  
            pre 
              code.language-javascript.
                if( wifi.state == "on" )
                  lookForNetworks()
                else 
                  hideNetworkList()
                  
                if( wifi.state == "off" )
                  hideNetworkList()
                  
                if( wifi.state != "on" )
                  hideNetworkList()

      section(data-bespoke-state='operators')
        h2 Storage
        ul
          li.bullet
          li.bullet variables store data for future reference
          li.bullet variables have unique names
          li.bullet assign data to variables with equals operator
          li.bullet
            pre 
              code.language-javascript.
                current_price = 4.95

      section(data-bespoke-state='operators')
        h2 Exceptions
        ul
          li.bullet
          li.bullet errors
          li.bullet when something unintended occurs in the program
          li.bullet execution may halt
          li.bullet
            pre 
              code.language-javascript.
                function openMenu()
                  $('#menu').slideDown()
                }
                // SyntaxError: Unexpected identifier
                // missing { on the first line

      section(data-bespoke-state='psuedo')
        h2 Psuedo Code
        ul
          li.bullet
          li.bullet shorthand code 
          li.bullet outlines logic of program 
          li.bullet used to understand control flow
          li.bullet not in an actual language but
          li.bullet uses conventions of actual languages

      section(data-bespoke-state='psuedo')
        h2 Psuedo Code
        h3 Conventions
        ul
          li.bullet
          li.bullet name variables and functions descriptively
          li.bullet use operators 
          li.bullet use statements and indention
          li.bullet sum up mini tasks in functions

      section(data-bespoke-state='psuedo')
        h2 Psuedo Code Example
        h3 Task: Program a Thermostat
        pre 
          code.language-javascript.
            target_temperature = get_desired_temperature()
            repeat every second
              current_temperature = get_sensor_reading()
              if target_temperature > ( current_temperature + 5 )
                  turn_on_heater()
              if target_temperature <= current_temperature
                  turn_off_heater()

      section(data-bespoke-state='psuedo')
        h2 Psuedo Code
        h3 How to write psuedo code
        ul
          li.bullet
          li.bullet start with a complex task
          li.bullet identify the inputs and the outputs
          li.bullet write down the data you need into variables
          li.bullet break it down into smaller tasks
          li.bullet turn 'hardware' interactions into functions
          li.bullet take a few passes through and simplify 

      section(data-bespoke-state='psuedo')
        h2 Psuedo Code Example
        h3 Task: Program a Thermostat
        pre 
          code.language-javascript.
            target_temperature = get_desired_temperature()
            repeat every second
              current_temperature = get_sensor_reading()
              if target_temperature > ( current_temperature + 5 )
                  turn_on_heater()
              if target_temperature <= current_temperature
                  turn_off_heater()

      section(data-bespoke-state='psuedo')
        h2 Psuedo Code Example
        h3 Task: Lock beer fridge until all timesheets are in
        pre 
          code.language-javascript.
            if day is friday
              if time is >= 4pm
                repeat every 30 minutes
                  all_timesheets_in = true
                  for each employee in company 
                    if timesheet != turned in 
                      all_timesheets_in = false
                  if all_timesheets_in
                    unlock beer fridge
                    exit

      section(data-bespoke-state='psuedo')
        h2 Questions
        h3 What should we revisit?

    script(src="//use.typekit.net/eag8wad.js")
    // build:js scripts/scripts.js
    script(src='bower_components/bespoke.js/dist/bespoke.min.js')
    script(src='bower_components/bespoke-keys/dist/bespoke-keys.min.js')
    script(src='bower_components/bespoke-touch/dist/bespoke-touch.min.js')
    script(src='bower_components/bespoke-bullets/dist/bespoke-bullets.min.js')
    script(src='bower_components/bespoke-scale/dist/bespoke-scale.min.js')
    script(src='bower_components/bespoke-hash/dist/bespoke-hash.min.js')
    script(src='bower_components/bespoke-progress/dist/bespoke-progress.min.js')
    script(src='bower_components/bespoke-state/dist/bespoke-state.min.js')
    script(src='bower_components/bespoke-forms/dist/bespoke-forms.min.js')
    script(src='bower_components/prism/prism.js')
    script(src='scripts/main.js')
    // endbuild